package handler

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"strconv"
	"strings"
	"time"

	_"../config"
	"../db"
	"github.com/Jeffail/gabs"
)

func responseMessage(data interface{}, response http.ResponseWriter, request *http.Request) {
	js, err := json.Marshal(data)
	if err != nil {
		http.Error(response, err.Error(), http.StatusInternalServerError)
	}

	response.Header().Set("Content-Type", "application/json")
	response.Write(js)
}

//ServerStatus is struct
type ServerStatus struct {
	Alive bool
	Time  time.Time
}

//StatusHandler is used for check server state
var StatusHandler = http.HandlerFunc(func(response http.ResponseWriter, request *http.Request) {
	var status ServerStatus
	status.Alive = true
	status.Time = time.Now()
	responseMessage(status, response, request)
})

//MinBetChanger is used for check server state
var MinBetChanger = http.HandlerFunc(func(response http.ResponseWriter, request *http.Request) {
	value, _ := strconv.Atoi(request.URL.Query().Get("value"))
	db.UpdateInfoMin(value)
	fmt.Fprintf(response, "—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ min")
})

//MaxBetChanger is used for check server state
var MaxBetChanger = http.HandlerFunc(func(response http.ResponseWriter, request *http.Request) {
	value, _ := strconv.Atoi(request.URL.Query().Get("value"))
	db.UpdateInfoMax(value)
	fmt.Fprintf(response, "—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ max")
})

//ConfirmHandler is used for check server state
var ConfirmHandler = http.HandlerFunc(func(response http.ResponseWriter, request *http.Request) {
	fmt.Fprintf(response, "515e7ecd")
})

//MessageHandler is used for check server state
var MessageHandler = http.HandlerFunc(func(response http.ResponseWriter, request *http.Request) {
	body, _ := ioutil.ReadAll(request.Body)
	json, _ := gabs.ParseJSON(body)
	message := strings.ToLower(ClearString(json.Path("object.body").String()))
	id := ClearID(json.Path("object.user_id").String())
	command, arg := Split(message)
	log.Println(id)
	log.Println(command, arg)
	switch command {
	case "help":
		ShowHelp(id)
	case "—Ö–µ–ª–ø":
		ShowHelp(id)
	case "–ø–æ–º–æ—â—å":
		ShowHelp(id)
	case "?":
		ShowHelp(id)

	case "–ø—Ä–∏–≤–µ—Ç":
		SendMessage(id, RandomHello())
	case "–æ–∫":
		SendMessage(id, ":like:")
	case "–æ–∫–µ–π":
		SendMessage(id, ":like:")
	case "ok":
		SendMessage(id, ":like:")
	case "–∫—Ä—É—Ç–æ":
		SendMessage(id, ":like:")
	case "–∫–ª–µ–≤–æ":
		SendMessage(id, ":like:")
	case "–∑–∞–µ–±–∏—Å—å":
		SendMessage(id, ";-]")
	case "–∑–±—Å":
		SendMessage(id, ";-]")
	case "–∑–¥–æ—Ä–æ–≤–æ":
		SendMessage(id, ";-]")
	case "–æ—Ç–ª–∏—á–Ω–æ":
		SendMessage(id, ";-]")
	case "—Ö–æ—Ä–æ—à–æ":
		SendMessage(id, ";-)")
	case "–ø–æ–∫–∞":
		SendMessage(id, ":v:")
	case "–ø—Ä–µ—Ç":
		SendMessage(id, RandomHello())
	case "—Ö–∞–π":
		SendMessage(id, RandomHello())
	case "hello":
		SendMessage(id, RandomHello())
	case "hi":
		SendMessage(id, RandomHello())
	case "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å":
		SendMessage(id, RandomHello())
	case "–∫–∞–∫":
		if arg == "–¥–µ–ª–∞" || arg == "—Å–∞–º" || arg == "—á–µ" || arg == "—Ç—ã" || arg == "–¥–µ–ª–∞?" || arg == "—Å–∞–º?" || arg == "—Ç—ã?" {
			SendMessage(id, RandomHowAreYou())
		} else {
			SendMessage(id, RandomFuckingMessage(message))
		}
	case "—Å–æ—Å–∏":
		SendMessage(id, "–¥–∞–≤–∞–π –∫–∞–∫-—Ç–æ —Å–∞–º")
	case "–Ω–∞—Ö—É–π":
		SendMessage(id, "–ø–æ–∂–∞–ª—É–π, –æ—Ç–∫–∞–∂—É—Å—å")
	case "–ø–∏–¥–æ—Ä":
		SendMessage(id, "–∑–∞—á–µ–º –æ–±–∑—ã–≤–∞–µ—à—å—Å—è?")
	case "—Å—É–∫–∞":
		SendMessage(id, "–≥—Ä—É–±–æ.")
	case "–±–ª—è—Ç—å":
		SendMessage(id, "...")
	case "–±–ª—è–¥—å":
		SendMessage(id, "...")
	case "–∏–¥–∏":
		if arg == "–Ω–∞—Ö—É–π" || arg == "–Ω–∞" || arg == "–≤" || arg == "–≤–ø–∏–∑–¥—É" {
		SendMessage(id, "–Ω–µ–∞")
		} else {
			SendMessage(id, RandomFuckingMessage(message))
		}


	case "—Ä–µ–≥–∞!":
		Register(id)
	case "—Ä–µ–≥–∞":
		Register(id)
	case "—Ä–µ–≥":
		Register(id)
	case "–º–µ—Å—Ç–æ":
		ShowPlace(id)
	case "—Ä–µ–π—Ç–∏–Ω–≥":
		ShowPlace(id)
	case "—Ä–µ–π—Ç":
		ShowPlace(id)

	case "—Å—Ç–∞–≤–∫–∏":
		MakeBets(id)
	case "–±–µ—Ç":
		BetMatch(id, arg)
	case "–Ω–∞—Ä–µ–∑–∫–∞":
		SendVideo(id)
	case "–≥–∏—Ñ–∫–∞":
		SendGif(id)
	case "–≥–∏—Ñ":
		SendGif(id)
	case "–Ω–æ–≤–æ—Å—Ç–∏":
		SubscribeNews(id, arg)
	default:
		if CheckArg(command) {
			BetMatch(id, command)
		} else {
			SendMessage(id, RandomFuckingMessage(message) + "%0A–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –Ω–∞–±–µ—Ä–∏: —Ö–µ–ª–ø ")
			db.UpdateLastCommand(id, "spam")
		}
	}
	fmt.Fprintf(response, "ok")
})

//SendVideo is for narezka
func SendVideo(id string) {
	url := RandomVideoURL()
	SendContent(id,"–õ–æ–≤–∏", url)
	db.UpdateLastCommand(id, "video")
}

//SendGif is for narezka
func SendGif(id string) {
	url := RandomGifURL()
	SendContent(id,"–î–µ—Ä–∂–∏", url)
	db.UpdateLastCommand(id, "gif")
}

func registerUser(id string) {
	SendMessage(id, "–¢—ã –ø—Ä–∏–Ω—è—Ç –≤ –ª–∏–≥—É! %0A –ü—Ä–∞–≤–∏–ª–∞ –ª–∏–≥–∏: https://vk.cc/73P0af %0A –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã –∏ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏—è—Ö.‚öΩ %0A  ‚ùó–î–ª—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω–∞–±–µ—Ä–∏: —Å—Ç–∞–≤–∫–∏")
}

//SendMessage answer to user
func SendMessage(id, message string) {
	log.Println(id)
	message = strings.Replace(message, " ", "%20", -1)
	_, err := http.Get("https://api.vk.com/method/messages.send?access_token=449c941ace6703fd55cfaee6b5863da12ecd29ad56168d842b73809a747bd2987f49a0ad4f3e64ab81178" + "&user_ids=" + id + "&message=" + message)
	if err != nil {
		log.Println(err)
	}
}

//Register add user to db or not
func Register(id string) {
	if db.ExistUserID(id) {
		SendMessage(id, "–í—ã —É–∂–µ —É—á–∞–≤—Å—Ç–≤—É–µ—Ç–µ –≤ –ª–∏–≥–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Å—Ç–æ–≤.")
	} else {
		db.UpdateInfoUser()
		db.InsertNewUser(id)
		registerUser(id)
	}
}

//ShowHelp show help
func ShowHelp(id string) {
	help := "üìå –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:%0A ‚ñ∂—Ö–µ–ª–ø/?  - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥%0A ‚ñ∂–Ω–∞—Ä–µ–∑–∫–∞ - —Å–ª—É—á–∞–π–Ω–∞—è –≤–∏–¥–µ–æ –ø–æ–¥–±–æ—Ä–∫–∞ –≥–æ–ª–æ–≤ %0A ‚ñ∂–≥–∏—Ñ–∫–∞ - —Å–ª—É—á–∞–π–Ω–∞—è –≥–∏—Ñ–∫–∞ %0A ‚ñ∂–Ω–æ–≤–æ—Å—Ç–∏ %2b(–∑–Ω–∞–∫ –ø–ª—é—Å) - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏%0A ‚ñ∂–Ω–æ–≤–æ—Å—Ç–∏ -(–∑–Ω–∞–∫ –º–∏–Ω—É—Å) - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π %0A ‚ñ∂—Ä–µ–≥–∞ - –≤—Å—Ç—É–ø–∏—Ç—å –≤ –ª–∏–≥—É –ø—Ä–æ–≥–Ω–æ–∑–∏—Å—Ç–æ–≤%0A ‚ñ∂—Å—Ç–∞–≤–∫–∏ - –º–∞—Ç—á–∏ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ %0A ‚ñ∂–±–µ—Ç 2-0(—Å—á—ë—Ç) - –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–∞—Ç—á %0A ‚ñ∂–º–µ—Å—Ç–æ - —É–∑–Ω–∞—Ç—å —Å–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥"
	SendMessage(id, help)
	db.UpdateLastCommand(id, "help")
}

//ShowPlace show –∑–¥—Ñ—Å—É
func ShowPlace(id string) {
	str := ""
	if db.ExistUserID(id) {
		user := db.GetUser(id)
		info := db.GetInfo()
		usersCount := strconv.Itoa(info.Users)
		place := strconv.Itoa(user.Place)
		points := strconv.Itoa(user.Points)
		if user.Points == 0 && info.MinBetID == 1 {
			str = "–£ –≤–∞—Å 0 –æ—á–∫–æ–≤, –∫–∞–∫ –∏ —É –≤—Å–µ—Ö. –ñ–¥–µ–º –ø–æ–∫–∞ —Å—ã–≥—Ä–∞—é—Ç –ø–µ—Ä–≤—ã–µ –º–∞—Ç—á–∏ ;-)"
		} 
		if user.Points == 0 && info.MinBetID > 1 {
			str = "–£ –≤–∞—Å 0 –æ—á–∫–æ–≤. –í—ã –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º –º–µ—Å—Ç–µ –∏–∑ " + usersCount
		}
		if user.Points > 0 {
			str = "–ù–∞–±—Ä–∞–Ω–æ –ø–æ–∏–Ω—Ç–æ–≤: " + points + ". –í—ã –∑–∞–Ω–∏–º–∞–µ—Ç–µ " + place + " –º–µ—Å—Ç–æ –∏–∑ " + usersCount 
		}

	} else {
		str = "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ—é –ø–æ–∑–∏—Ü–∏—é –≤ –ª–∏–≥–µ, –Ω–∞–¥–æ –≤ –Ω–µ–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ù–∞–ø–∏—à–∏—Ç–µ: —Ä–µ–≥"
	}
	
	SendMessage(id, str)
	db.UpdateLastCommand(id, "place")
}
